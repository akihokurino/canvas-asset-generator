// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalAPIClient is the client API for InternalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalAPIClient interface {
	SignedGSURLs(ctx context.Context, in *SignedGSURLsRequest, opts ...grpc.CallOption) (*SignedGSURLsResponse, error)
}

type internalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalAPIClient(cc grpc.ClientConnInterface) InternalAPIClient {
	return &internalAPIClient{cc}
}

func (c *internalAPIClient) SignedGSURLs(ctx context.Context, in *SignedGSURLsRequest, opts ...grpc.CallOption) (*SignedGSURLsResponse, error) {
	out := new(SignedGSURLsResponse)
	err := c.cc.Invoke(ctx, "/service.InternalAPI/SignedGSURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalAPIServer is the server API for InternalAPI service.
// All implementations should embed UnimplementedInternalAPIServer
// for forward compatibility
type InternalAPIServer interface {
	SignedGSURLs(context.Context, *SignedGSURLsRequest) (*SignedGSURLsResponse, error)
}

// UnimplementedInternalAPIServer should be embedded to have forward compatible implementations.
type UnimplementedInternalAPIServer struct {
}

func (UnimplementedInternalAPIServer) SignedGSURLs(context.Context, *SignedGSURLsRequest) (*SignedGSURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedGSURLs not implemented")
}

// UnsafeInternalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalAPIServer will
// result in compilation errors.
type UnsafeInternalAPIServer interface {
	mustEmbedUnimplementedInternalAPIServer()
}

func RegisterInternalAPIServer(s grpc.ServiceRegistrar, srv InternalAPIServer) {
	s.RegisterService(&InternalAPI_ServiceDesc, srv)
}

func _InternalAPI_SignedGSURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedGSURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).SignedGSURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.InternalAPI/SignedGSURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).SignedGSURLs(ctx, req.(*SignedGSURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalAPI_ServiceDesc is the grpc.ServiceDesc for InternalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.InternalAPI",
	HandlerType: (*InternalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignedGSURLs",
			Handler:    _InternalAPI_SignedGSURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
